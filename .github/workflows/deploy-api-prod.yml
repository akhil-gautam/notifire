# This is a basic workflow to help you get started with Actions

name: Deploy PROD API

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags:
      - '**@notifire/api@**'
      - '**@notifire/dal@**'
      - '**@notifire/shared@**'
jobs:
  test_api:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 80

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Setup kernel for react native, increase watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      - uses: actions/setup-node@v2
        with:
          node-version: '15.11.0'
      - name: Start Redis
        uses: supercharge/redis-github-action@1.2.0

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: 4.2.8

      - name: restore lerna
        uses: actions/cache@master
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      # Runs a single command using the runners shell
      - name: Install project dependencies
        run: yarn install

      - name: Start Local Stack
        env:
          AWS_DEFAULT_REGION: us-east-1
          DEFAULT_REGION: us-east-1
          AWS_ACCOUNT_ID: "000000000000"
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_EC2_METADATA_DISABLED: true
        working-directory: environment/test
        run: |
          docker-compose up -d
          sleep 10
          max_retry=30
          counter=0
          until $command
          do
            sleep 1
            [[ counter -eq $max_retry ]] && echo "Failed!" && exit 1
            aws --endpoint-url=http://localhost:4566 s3 ls
            echo "Trying again. Try #$counter"
            ((counter++))
          done
          docker-compose logs --tail="all"
          aws --endpoint-url=http://localhost:4566 s3 mb s3://notifire-test

        # Runs a single command using the runners shell
      - name: Bootstrap
        run: yarn run bootstrap

        # Runs a single command using the runners shell
      - name: Build API
        run: CI='' yarn run build:api

      # Runs a set of commands using the runners shell
      - name: Run a test
        run: |
          cd apps/api && yarn run test:e2e
          yarn run test

  # This workflow contains a single job called "build"
  deploy_api:
    needs: [test_api]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 80

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Start deployment
        uses: bobheadxi/deployments@v0.4.3
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Setup kernel for react native, increase watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - uses: actions/setup-node@v2
        with:
          node-version: '15.11.0'

      - name: Start Redis
        uses: supercharge/redis-github-action@1.2.0

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: 4.2.8

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.4
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Change Workspace
        working-directory: terraform
        run: terraform workspace select prod
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
        with:
          path: apps/api
      - name: Terraform get output
        working-directory: terraform
        id: terraform
        run: |
          echo "api_ecs_container_name=$(terraform output -json api_ecs_container_name | jq -r .)" >> $GITHUB_ENV
          echo "api_ecs_service=$(terraform output -json api_ecs_service | jq -r .)" >> $GITHUB_ENV
          echo "api_ecs_cluster=$(terraform output -json api_ecs_cluster | jq -r .)" >> $GITHUB_ENV
          echo "api_task_name=$(terraform output -json api_task_name | jq -r .)" >> $GITHUB_ENV

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.api_task_name }} \
          --query taskDefinition > task-definition.json

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.api_ecs_container_name }}
          IMAGE_TAG: ${{ steps.package-version.outputs.current-version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.api .
          docker run --network=host --name api -dit --env NODE_ENV=test $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker run --network=host appropriate/curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:1337/v1/health-check | grep 'ok'
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:prod
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:prod
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=IMAGE::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Render Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.api_ecs_container_name }}
          image: ${{ steps.build-image.outputs.IMAGE }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: ${{ env.api_ecs_service }}
          cluster: ${{ env.api_ecs_cluster }}
          wait-for-service-stability: true
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: notifire
          SENTRY_PROJECT: api
        with:
          environment: prod
          version: ${{ steps.package-version.outputs.current-version }}
      - name: update deployment status
        uses: bobheadxi/deployments@v0.4.3
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
